import Spectral.Graphics.Vertices

/// This class transforms a sound file from time-domain to frequency domain using a Fast Fourier Transform.
class Transformation:
    /// A pixel is a point on our heatmap, generated by the FFT. It has a frequency, an time and an amplitude.
    struct Pixel:
        /// Constructor.
        ///
        /// @param t Time as the n-th Fourier transformation.
        /// @param f Frequency as the bin number after a Fourier transform. For example, with a samplerate of 44KHz
        ///          and a Fourier windowsize of 2048, each bin will represent ~20Hz.
        /// @param a Amplitude as some dimensionless number. If my memory serves me right, this is in lineair scale.
        ///          You probably want this in logarithmic scale.
        def constructor(t as double, f as double, a as double):
            time = t
            freq = f
            amp  = a

        /// ToString override
        override def ToString() as string:
            return "($time, $amp, $freq)"

        time as double
        freq as double
        amp  as double

    /// The input sound file that needs to be transformed.
    Wave as Wave:
        get:
            return _wave;
        set:
            _wave = value

    /// The number of samples -PER BLOCK-.
    /// 
    /// @pre The number has to be a power of 2.
    Samples as int:
        get:
            return _samples
        set:
            if (value > 1 and (value & (value - 1)) == 0): // The value must be bigger than 1 and be a power of 2.
                _samples = value
            else:
                raise ArgumentException("The block of samples for the transformation is not a power of 2.")

    /// The number of frequency bins each sample will have.
    BinsPerTransform as int:
        get:
            return Math.Ceiling((Samples / 2 + 1) cast single / _downSampleFreq)

    /// The numbers of Fourier transformations the method will perform.
    /// 
    /// If we are going to analyze 'n' samples of all the samples we have for the sound file,
    /// we will need to do 'n / NumSamples' of transforms in total. For now in this case we will throw away
    /// the last samples that can not form a block of 'n' samples (mostly, a power of 2 like 2048).
    HowMany as int:
        get:
            raise NullReferenceException("You haven't set up a sound file for the transformation yet.") if Wave is null
            return ((Wave.NumSamples cast double / Samples cast double) / _downSampleTime)

    /// Returns the transformed data as an array of Pixels.
    ///
    /// @pre The transformation has to be transformed.
    Data as (Pixel):
        get:
            raise "You have not yet transformed the data!" if not _isTransformed

            return _data

    /// Whether we have transformed the data yet
    Transformed as bool:
        get:
            return _isTransformed

    private _wave         as Wave         // The sound data we are going to transform.
    private _pIn          as IntPtr        // Pointer the unmanaged input array for FFTW.
    private _pOut         as IntPtr        // Pointer to the unmanaged output array for FFTW.
    private _plan         as IntPtr        // Pointer to our designated plan of FFTW execution.
    private _samples     as int             // The number of samples -PER BLOCK-.
    private _samplesAr    as IntPtr        // Array of number of samples, needed for plan and we need to free it later as well.

    private _data           as (Pixel)
    private _isTransformed     as bool = false
    private _normalized        as bool = false

    private _maxAmp as double = 0

    private _downSampleTime as uint = 1
    private _downSampleFreq as uint = 1

    // Filters to apply
    private _filterNormalize as bool = false
    private _filterGaussian  as bool = false

    // Gaussian Blur settings
    private _gaussianIterations as int      = 0
    private _gaussianDeviation as double = 0

    /// Transforms the audio into a frequency spectrum, thus a heatmap; with coordinates in 3 dimensions.
    ///
    /// Minimal amplitude is 0, max is given by the return value of this function.
    /// Minimal frequency is 0, obviously, maximum is half the sampling rate of the audio file.
    /// Minimal time is 0 obviously, maximum is the total number of fourier transforms.
    /// The computed data will be put in the Data property.
    ///
    /// @pre The input sound file has to be specified.
    /// @post _isTransformed will be true if FFTW has been executed succesfully.
    /// @todo For now, we only process one channel. Extend this to all channels.
    def Transform():
        raise NullReferenceException("The sound file is null?") if Wave is null
        Init()

        // Let us first try this library with 1 channel
        Spectral.Engine.Log.Print("Retrieving channel data...")
        Spectral.Engine.Log.StartTimer()
        data = Wave.GetChannel(1)
        Spectral.Engine.Log.Print("Data received.", true)

        Spectral.Engine.Log.Print("Copying all sound data to the input array for FFT..")
        Spectral.Engine.Log.StartTimer()
        Marshal.Copy(data, 0, _pIn, HowMany * Samples)
        Spectral.Engine.Log.Print("Copy succesful.", true)

        Spectral.Engine.Log.Print("Executing FFT...")
        Spectral.Engine.Log.StartTimer()
        fftw.execute(_plan)
        _isTransformed = true
        Spectral.Engine.Log.Print("Execution succesful!", true)

        Spectral.Engine.Log.Print("Copying output from FFT into a readable array.")
        Spectral.Engine.Log.StartTimer()
        output = array(double, HowMany * BinsPerTransform * 2) // We get (N / 2 + 1) samples back, but also double the amount of space, since Real -> Complex.
        Marshal.Copy(_pOut, output, 0, HowMany * BinsPerTransform * 2)
        Spectral.Engine.Log.Print("Copy succesful.", true)

        Free()

        Spectral.Engine.Log.Print("Processing FFT output...")
        Spectral.Engine.Log.StartTimer()

        _maxAmp = 0
        _data = array(Pixel, HowMany * BinsPerTransform)

        // For each time interval.
        for i in range(0, HowMany):
            // For each frequency bin.
            for j in range(0, BinsPerTransform):
                index as int         = i * BinsPerTransform * 2 + j
                amplitude as double = Math.Pow(Math.Log(Math.Sqrt(output[index] * output[index] + output[index + 1] * output[index + 1]), 10), 3)
                _data[(i * BinsPerTransform) + j] = Pixel(i, j, amplitude)

                // Keep track of our maximum amplitude, as we may need it for normalization later on.
                if amplitude > _maxAmp:
                    _maxAmp = amplitude

        Spectral.Engine.Log.Print("Processed FFT output.", true)
        Spectral.Engine.Log.StopTimer()

    /// This will normalize our data so it fits into a 1 x 1 x 1 cube.
    /// Normally (pun unintended), the origin of the entire cube sits at (0.5; 0.5; 0.5).
    ///
    /// @param centralize If this is set to true, the origin of the entire cube will not be (0.5; 0.5; 0.5), but (0, 0, 0).
    def Normalize(centralize as bool):
        raise "You have not yet transformed the data!" if not Transformed
        
        Spectral.Engine.Log.Print("Normalizing data...")
        Spectral.Engine.Log.StartTimer()

        if centralize:
            for i in range(0, Data.Length):
                p              = Data[i]
                Data[i].time = p.time / HowMany cast double - 0.5
                Data[i].freq = p.freq / BinsPerTransform cast double - 0.5
                Data[i].amp  = p.amp / _maxAmp - 0.5
        else:
            for i in range(0, Data.Length):
                p              = Data[i]
                Data[i].time = p.time / HowMany cast double
                Data[i].freq = p.freq / BinsPerTransform cast double
                Data[i].amp  = p.amp / _maxAmp

        _normalized = true

        Spectral.Engine.Log.Print("Data normalized.", true)
        Spectral.Engine.Log.StopTimer()

    /// Filters the processed data such that it gets smoothed using Gaussian blur.
    ///
    /// One pass convolutes the transformed data with a 3x3 Gaussian convolution matrix.
    /// The way it's implemented however, are two passes of a 2x1 Gaussian convolution matrix,
    /// as it gives the same result but has a lower running time.
    def GaussianBlur(dev as double):
        raise "You have not yet transformed the data!" if not Transformed

        Spectral.Engine.Log.Print("Applying Gaussian blur to data...")
        Spectral.Engine.Log.StartTimer()

        gaussian = {x as double, d as double | return (1 / (Math.Sqrt(Utility.Tau) * d) * Math.Pow(Math.E, -1 * ((x * x) / 2 * d * d)))}
        x0          = gaussian(0, dev)
        x1          = gaussian(1, dev)

        _maxAmp             = 0
        output as double     = 0
        p as Pixel

        // First, convolute over the rows.
        for i in range(0, Data.Length):
            p         = Data[i]

            output  = x0 * p.amp
            output += x1 * GetPixel(p.time - 1, p.freq).amp // Left
            output += x1 * GetPixel(p.time + 1, p.freq).amp // Right

            Data[i].amp = output

        // Convolute the previous row convolution now by columns.
        for i in range(0, Data.Length):
            p         = Data[i]
            
            output  = x0 * p.amp
            output += x1 * GetPixel(p.time, p.freq - 1).amp // Up
            output += x1 * GetPixel(p.time, p.freq + 1).amp // Down

            Data[i].amp = output

            // We have to recheck for the biggest amplitude, as we are changing data and cannot immediatly find the new biggest amplitude.
            if output > _maxAmp:
                _maxAmp = output

        Spectral.Engine.Log.Print("Data blurred.", true)
        Spectral.Engine.Log.StopTimer()

    /// Returns the pixel of the x-th time sample at the y-th frequency.
    /// If no such pixel exists, the return value will be a Pixel with all members set to 0.
    /// This functions does not work after data has been normalized!
    def GetPixel(time as int, freq as int) as Pixel:
        raise "You're calling GetPixel() after normalizing. This is not supported and corrupts the data!" if _normalized // @todo Fuck, solve this?
        time /= _downSampleTime
        freq /= _downSampleFreq
        return Pixel(0, 0, 0) if time < 0 or freq < 0 or time >= HowMany or freq >= BinsPerTransform
        
        index as double = time * BinsPerTransform + freq
        if index < Data.Length:
            return Data[index]
        else:
            return Pixel(0, 0, 0)

    /// Exports the data into a Wavefront .obj file. Very crude at the moment and exports only in quads.
    ///
    /// @param path The place to store the created .obj file.
    /// @param t How many time samples (fourier transforms) we should skip after each scan.
    /// @param f Downsampling by frequency, not yet implemented.
    def ExportObj(path as string):
        raise "You have not yet transformed the data!" if not Transformed

        Spectral.Engine.Log.Print("Exporting terrain to Wavefront Obj. Downsampled (time: $(_downSampleTime)x - freq: $(_downSampleFreq))...")
        Spectral.Engine.Log.StartTimer()

        try:
            sw as StreamWriter = StreamWriter(path)
            sw.WriteLine("# Generated by Spectral Universe")
            sw.WriteLine("o Spectrogram")

            data = CreateSpectralModel()

            for v as VertexNormalColor in data:
                sw.WriteLine("v $(v.pos.X) $(v.pos.Y), $(v.pos.Z)")

            for i in range(0, data.Length, 4):
                sw.WriteLine("f $(i) $(i + 1) $(i + 2) $(i + 3)")
        except ex:
            Spectral.Engine.Log.Print(Level.Error, ex.Message)
        ensure:
            sw.Close()

        Spectral.Engine.Log.Print("Exported to " + path + ".", true)
        Spectral.Engine.Log.StopTimer()

    /// Creates a model to be used by the Spectral Engine.
    /// @todo Add downsampling. Maybe downsample before normalizing and such? Change HowMany and BinsPerTransform etc.
    /// @todo Remove the lists and work with arrays instead for speed.
    /// @todo Move coloringg to shader. Give 1D texture and height. Cut this Color4f crap.
    def CreateSpectralModel() as (VertexNormalColor):
        raise "You have not yet transformed the data!" if not Transformed
        //raise "Normalized models supported only atm, due to colors." if not _normalized
        Spectral.Engine.Log.Print("Creating 3D mesh out of the transformed sound data.")
        Spectral.Engine.Log.StartTimer()

        data = OneDimensionalToTwoDimensional()
        vertices = array(VertexNormalColor, HowMany * BinsPerTransform * 4)

        vcounter as uint = 0
        for i in range(HowMany):
            for j in range(BinsPerTransform):
                p1         = data[i         , j]
                p2          = Pixel(0, 0, 0)
                p3         = Pixel(0, 0, 0)
                p4          = Pixel(0, 0, 0)
                if i < HowMany - 1 and j < BinsPerTransform - 1:
                    p2      = data[i         , j + 1]
                    p3     = data[i + 1     , j + 1]
                    p4      = data[i + 1     , j]

                v          = array(Vector3, 4)
                v[0]     = Vector3(p1.time, p1.amp, p1.freq) // Lower left.
                v[1]      = Vector3(p2.time, p2.amp, p2.freq) // Upper left.
                v[2]      = Vector3(p3.time, p3.amp, p3.freq) // Upper right.
                v[3]      = Vector3(p4.time, p4.amp, p4.freq) // Lower right.

                n          = array(Vector3, 4)
                n[0]     = Vector3.Cross(v[3] - v[0], v[1] - v[0]) // Normal lower left.
                n[1]     = Vector3.Cross(v[0] - v[1], v[2] - v[1]) // Normal upper left.
                n[2]      = Vector3.Cross(v[1] - v[2], v[3] - v[2]) // Normal upper right.
                n[3]      = Vector3.Cross(v[2] - v[3], v[0] - v[3]) // Normal lower right.
                normal   = -Vector3.Normalize(n[0] + n[1] + n[2] + n[3])

                c          = Color4(0.5f, 0.5f, 0.5f, 1f)

                vertices[vcounter++] = VertexNormalColor(v[0], normal, c)
                vertices[vcounter++] = VertexNormalColor(v[1], normal, c)
                vertices[vcounter++] = VertexNormalColor(v[2], normal, c)
                vertices[vcounter++] = VertexNormalColor(v[3], normal, c)

        Spectral.Engine.Log.Print("Created 3D mesh. Vertices: $(vertices.Length) - Quads: $(vertices.Length / 4)", true)
        Spectral.Engine.Log.StopTimer()
        return vertices

    /// Returns the data as a 2D array instead of a 1D array of Pixels
    def OneDimensionalToTwoDimensional():
        raise "You have not yet transformed the data!" if not Transformed

        data = matrix(Pixel, HowMany, BinsPerTransform)
        counter as int = 0

        for i in range(HowMany):
            for j in range(BinsPerTransform):
                data[i, j] = Data[counter]
                counter++

        return data

    /// Downsamples the data by a factor.
    ///
    /// @param t How many times the time should be scaled down.
    /// @param f How many times the frequency should be scaled down.
    /// @todo Raise if already filtered. Create a check for that.
    /// @todo frequency is being fucked up with rendering.
    def Downsample(t as uint, f as uint):
        raise "You have not yet transformed the data!" if not Transformed
        raise "Nigger, what are you even trying to do with t or f = 0?" if t == 0 or f == 0

        Spectral.Engine.Log.StartTimer()
        Spectral.Engine.Log.Print("Downsampling, time: $(t)x - freq: $(f)x")
        downsampled as (Pixel) = array(Pixel, Math.Ceiling(HowMany cast single / t cast single) * Math.Ceiling(BinsPerTransform cast single / f cast single))

        _maxAmp         = 0
        counter as uint = 0
        data = OneDimensionalToTwoDimensional()
        for i in range(0, HowMany, t):                     // Time
            for j in range(0, BinsPerTransform, f):     // Freq
                downsampled[counter++] = data[i, j]
                if data[i, j].amp > _maxAmp:
                    _maxAmp = data[i, j].amp

        _data              = downsampled
        _downSampleTime *= t
        _downSampleFreq *= f

        Spectral.Engine.Log.Print("Downsampling complete.", true)
        Spectral.Engine.Log.StopTimer()

    /// Initializes the data and plans for our transformation.
    private def Init():
        _pIn  = fftw.malloc(Samples * 8 * HowMany)                 // Our input data is an array of n times a double value (the recorded amplitude).
        _pOut = fftw.malloc(BinsPerTransform * 16 * HowMany)     // Same as above, only it's a complex number, thus twice a double point value.

        Spectral.Engine.Log.Print("We are going to do " + HowMany + " Fourier Transforms, each consisting of " + Samples + " samples.")
        Spectral.Engine.Log.Print("Input allocated: " + Samples * 8 * HowMany + " bytes - Output allocated: " + BinsPerTransform * 16 * HowMany + " bytes.")

        // Create rank array. Kinda ugly, as it only contains 1 element, but so far this works for now.
        _samplesAr         = fftw.malloc(4)
        temp as (int)     = array(int, 1)
        temp[0]         = Samples
        Marshal.Copy(temp, 0, _samplesAr, temp.Length)

        // Create a plan for multiple DFT's from Real -> Complex.
        _plan = fftw.many_dft_r2c(1,                // The rank / dimension of our transforms, which is just 1 as we have 1 dimension.
                                   _samplesAr,       // 1D transforms of size Samples in our case.
                                   HowMany,             // The amount of transformations we will perform.
                                   _pIn,             // Pointer to our input array.
                                   IntPtr.Zero,        // We don't need embedding.
                                   1,                // Our memory is contiguous, so it's just 1.
                                   Samples,             // The distance in memory between different transforms for the input (1*double).
                                   _pOut,             // Pointer to our output array.
                                   IntPtr.Zero,         // We don't need embedding.
                                   1,                // Our memory is contiguous, so it's just 1.
                                   Samples / 2 + 1,    // The distance in memory between different transforms for the output: Samples / 2 + 1 (2*double).
                                   fftw_flags.Estimate) // We wan't to take our sweet time for the best performace, since we will do a lot of transforms.

    /// Cleans up the mess after our transformation is complete
    private def Free():
        // Free all allocated resources
        Spectral.Engine.Log.Print("Freeing FFT allocated memory...")
        fftw.free(_pIn)
        fftw.free(_pOut)
        fftw.free(_samplesAr)
        fftw.destroy_plan(_plan)
        Spectral.Engine.Log.Print("FFT allocated memory freed.")